service: aws-event-demo-api-service
defaultStage: local
stage: ${opt:stage,self:custom.defaultStage}
region: ${env:REGION, 'ap-southeast-2'}
account: ${env:AWS_ACCOUNT, '587919987702'}
orderCreatedEventBus: order-created-bus

### DynamoDB Tables ######
paymentTable:
  name: ${self:custom.paymentTableName}
  arn: ${self:custom.paymentTableArn}
paymentTableName: !Ref paymentTable
paymentTableArn: !GetAtt paymentTable.Arn

orderTable:
  name: ${self:custom.orderTableName}
  arn: ${self:custom.orderTableArn}
  StreamArn: ${self:custom.orderTableStreamArn}
orderTableName: !Ref orderTable
orderTableArn: !GetAtt orderTable.Arn
orderTableStreamArn: !GetAtt orderTable.StreamArn

eventTrackerTable:
  name: ${self:custom.eventTrackerTableName}
  arn: ${self:custom.eventTrackerTableArn}
  streamArn: ${self:custom.eventTrackerTableStreamArn}
eventTrackerTableName: !Ref eventTrackerTable
eventTrackerTableArn: !GetAtt eventTrackerTable.Arn
eventTrackerTableStreamArn: !GetAtt eventTrackerTable.StreamArn

#### serverless offline
serverless-offline:
  httpPort: 4000
  lambdaPort: 5000

dynamodb:
  stages:
    - ${self:custom.stage}
  start:
    port: 8000
    inMemory: true
    migrate: true
    seed: true
  migration:
    dir: serverless/resources/dynamo
  seed:
    domain:
      sources:
        - table: aws-event-demo-api-service-${self:custom.stage}-payment
          sources: [./seeds/payment.json]
        - table: aws-event-demo-api-service-${self:custom.stage}-order
          sources: [./seeds/order.json]
